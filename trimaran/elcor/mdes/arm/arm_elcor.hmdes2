/////////////////////////////////////////////////////////////////////////////
//
//      File:           arm_elcor.hmdes2
//      Authors:        Nate Clark
//      Created:        December, 2003
//      Description:    ARM Architecture Description (Elcor Specific)
//
/////////////////////////////////////////////////////////////////////////////

// Written by Nate Clark 12/31/03
// Based on Shail Aditya's HPL-PD example 01/16/96
// Based on John C. Gyllenhaal's example of PA_7100_IMPACT.hmdes2
// Based on Rick Hank's PLAYDOH.hmdes1

// *************************************************************
// Elcor Operations and Properties

SECTION Elcor_Operation_Flag
{
  // Operation Class
  // order must be consistent with OpClass defined in mdes.h
  NULLOP();
  LOADOP();
  STOREOP();
  BRANCHOP();
  ARITHOP();
  CUSTOMOP();

  // Resource Class
  // order must be consistent with ResClass defined in mdes.h
  NULL();
  INT();
  FLOAT();
  MEMORY();
  BRANCH();

  // HPL-PD 2.0 Extn
  $if ($?{local_memory_units}) {
    LOCALMEMORY();
  }

  // Eager Class
  NONSPECULATIVE();
  SPECULATIVE(); 

  // Other flags
  is_pred();  		// op is predicated
  is_leop();		// op follows less-than-equals semantics
  is_advload();		// op is advanced load
  is_assoc();		// op is associative
  is_comm();		// op is commutative
  is_unsupported();     // op is unsupported
}

// *************************************************************
// Dummy/Pseudo Scheduling Alternatives and Operations

SECTION Operation_Format
{
  OF_null(pred() src() dest());
  OF_def(pred() src(FT_icfbpl8dpu FT_icfbpl8dpu) dest(FT_icfbpu));

  // Shivarama Rao. Added new opcodes for pseudo load and removed the
  // Overloaded PSEUDO_LOAD operation
  OF_pseudo_load_literal(pred() src(FT_l8dp) dest(FT_icfbpu));
  OF_pseudo_load_scalar(pred() src(FT_l8dp FT_l8dp) dest(FT_icfbpu));
  OF_pseudo_load_scalar_array(pred() src(FT_l8dp FT_l8dp FT_l8dp) dest(FT_icfbpu));
  OF_pseudo_load_evr(pred() src(FT_l8dp FT_l8dp FT_l8dp) dest(FT_icfbpu));

  // Shivarama Rao. Added new opcodes for pseudo store and removed the
  // Overloaded PSEUDO_STORE operation
  OF_pseudo_store_scalar(pred() src(FT_l8dp FT_l8dp FT_i) dest());
  OF_pseudo_store_scalar_array(pred() src(FT_l8dp FT_l8dp FT_l8dp FT_i) dest());
  OF_pseudo_store_evr(pred() src(FT_l8dp FT_l8dp FT_l8dp FT_i) dest());
  OF_pseudo_print(pred() src(FT_i FT_l8dp FT_l8dp) dest());
  OF_pseudo_init_mem(pred() src(FT_l8dp FT_l8dp FT_l8dp FT_l8dp FT_l8dp FT_l8dp FT_l8dp FT_l8dp FT_l8dp) dest());
  OF_use(pred() src(FT_l8dp) dest());
  OF_alloc(pred() src(FT_l8dp) dest(FT_i));
  OF_dummy(pred() src() dest());
  OF_all(pred() src(FT_icfbpu) dest(FT_icfbpu));
  OF_brdir(pred(FT_p) src(FT_icfbpl8dpu FT_icfbpl8dpu FT_icfbpl8dpu) dest());
  OF_brind(pred(FT_p) src(FT_icfbpu) dest());

  //modification for custom opcode tangw (06-04-02)
  OF_custom(pred(FT_p) 
            src(FT_icfbpl8dpu FT_icfbpl8dpu FT_icfbpl8dpu FT_icfbpl8dpu FT_icfbpl8dpu)  
            dest(FT_icfbpu FT_icfbpu FT_icfbpu FT_icfbpu FT_icfbpu)); 
}

SECTION Scheduling_Alternative
{
  SA_null_null_null(format(OF_null) latency(OL_null) resv(RT_null));
  SA_def_null_null(format(OF_def) latency(OL_null) resv(RT_null));

  // Shivarama Rao. Added new opcodes for pseudo load and removed the
  // Overloaded PSEUDO_LOAD operation
  SA_pseudo_load_literal_null_null(format(OF_pseudo_load_literal) latency(OL_null) resv(RT_null));
  SA_pseudo_load_scalar_null_null(format(OF_pseudo_load_scalar) latency(OL_null) resv(RT_null));
  SA_pseudo_load_scalar_array_null_null(format(OF_pseudo_load_scalar_array) latency(OL_null) resv(RT_null));
  SA_pseudo_load_evr_null_null(format(OF_pseudo_load_evr) latency(OL_null) resv(RT_null));

  // Shivarama Rao. Added new opcodes for pseudo store and removed the
  // Overloaded PSEUDO_STORE operation
  SA_pseudo_store_scalar_null_null(format(OF_pseudo_store_scalar) latency(OL_null) resv(RT_null));
  SA_pseudo_store_scalar_array_null_null(format(OF_pseudo_store_scalar_array) latency(OL_null) resv(RT_null));
  SA_pseudo_store_evr_null_null(format(OF_pseudo_store_evr) latency(OL_null) resv(RT_null));
  SA_pseudo_print_null_null(format(OF_pseudo_print) latency(OL_null) resv(RT_null));
  SA_pseudo_init_mem_null_null(format(OF_pseudo_init_mem) latency(OL_null) resv(RT_null));
  SA_use_null_null(format(OF_use) latency(OL_null) resv(RT_null));
  SA_alloc_null_null(format(OF_alloc) latency(OL_null) resv(RT_null));
  SA_dummy_null_null(format(OF_dummy) latency(OL_null) resv(RT_null));
  SA_all_branch_null(format(OF_all) latency(OL_branch) resv(RT_null));
  SA_all_null_null(format(OF_all) latency(OL_null) resv(RT_null));
  SA_brdir_branch_null(format(OF_brdir) latency(OL_branch) resv(RT_null));
  SA_brind_branch_null(format(OF_brind) latency(OL_branch) resv(RT_null));

  //modification for custom opcode tangw (06-04-02)
  SA_custom(format(OF_custom) latency(OL_null) resv(RT_null));
}

SECTION Operation
{
  // dummy ops
  "PROLOGUE.0"(alt(SA_null_null_null));
  "EPILOGUE.0"(alt(SA_null_null_null));
  "DEFINE.0"(alt(SA_def_null_null));

  // Shivarama Rao. Added new opcodes for pseudo load and removed the
  // Overloaded PSEUDO_LOAD operation
  "PSEUDO_LOAD_LITERAL.0"(alt(SA_pseudo_load_literal_null_null));
  "PSEUDO_LOAD_SCALAR.0"(alt(SA_pseudo_load_scalar_null_null));
  "PSEUDO_LOAD_SCALAR_ARRAY.0"(alt(SA_pseudo_load_scalar_array_null_null));
  "PSEUDO_LOAD_EVR.0"(alt(SA_pseudo_load_evr_null_null));

  // Shivarama Rao. Added new opcodes for pseudo store and removed the
  // Overloaded PSEUDO_STORE operation
  "PSEUDO_STORE_SCALAR.0"(alt(SA_pseudo_store_scalar_null_null));
  "PSEUDO_STORE_SCALAR_ARRAY.0"(alt(SA_pseudo_store_scalar_array_null_null));
  "PSEUDO_STORE_EVR.0"(alt(SA_pseudo_store_evr_null_null));
  "PSEUDO_PRINT.0"(alt(SA_pseudo_print_null_null));
  "PSEUDO_INIT_MEM.0"(alt(SA_pseudo_init_mem_null_null));
  "ALLOC.0"(alt(SA_alloc_null_null));
  "DUMMY_BR.0"(alt(SA_dummy_null_null));
  "C_MERGE.0"(alt(SA_dummy_null_null));
  "D_SWITCH.0"(alt(SA_all_null_null));
  "D_MERGE.0"(alt(SA_all_null_null));
  "REMAP.0"(alt(SA_all_null_null));
  "NO_OP.0"(alt(SA_dummy_null_null));
  "M_NO_OP.0"(alt(SA_use_null_null));

  // branch pseudo ops
  "BRDIR.0"(alt(SA_brdir_branch_null));
  "BRIND.0"(alt(SA_brind_branch_null));
 
  // pseudo DEF and USE KF 10-2002
  "DEF.0"(alt(SA_def_null_null));
  "USE.0"(alt(SA_def_null_null));

  //modification for custom opcode tangw (06-04-02)
  "CUSTOM.0"(alt(SA_custom));
}

// *************************************************************
// Elcor Operations

SECTION Elcor_Operation
{
  // **** Integer operations ****

  // FIX: add Multiply-Accumulate instructions (intarith3_intmpy).

  // Table 2: Integer computation operations 
  $for (class in intarith1_int intarith2_int intarith2_intshift intarith2_intmpy) {
    $for (op in ${OP_${class}}) {
      $for(w in ${int_alu_widths}) {
	${op}_${w}(op($for (idx in $0..(exec_units-1)) { "${op}_${w}.${idx}" })
		   flags(ARITHOP INT SPECULATIVE));
      }
    }
  }

  // Table 2: Integer computation operations 
  $for (class in intarith2_intdiv) {
    $for (op in ${OP_${class}}) {
      $for(w in ${int_alu_widths}) {
	${op}_${w}(op(
                      $for (idx in $0..(exec_units-1)) { "${op}_${w}.${idx}" })
		   flags(ARITHOP INT NONSPECULATIVE));
      }
    }
  }

  // Saturating arithmetic
//  $for (class in intarith2_intsatadd intarith2_intsataddl intarith2_intsatsub intarith2_intsatsubl 
//                 intarith2_intsatmpy intarith2_intsatmpyl intarith3_intsatmpyadd 
//                 intarith3_intsatmpyaddn intarith3_intsatmpysub intarith3_intsatmpyrsub) {
//    $for (op in ${OP_${class}}) {
//      $for(w in ${int_alu_widths}) {
//	$for (i in $1..32) {
//	  ${op}${i}_${w}(op(
//                            $for (idx in $0..(exec_units-1)) { "${op}${i}_${w}.${idx}" })
//			 flags(ARITHOP INT SPECULATIVE));
//	}
//      }
//    }
//  }

  // Table 4: Conversion operations 
  $for(op in ${OP_sign_extend}) {
    $for(w in ${int_extract_widths}) {
      ${op}_${w}(op(
                    $for (idx in $0..(exec_units-1)) { "${op}_${w}.${idx}" })
		 flags(ARITHOP INT SPECULATIVE));
    }
  }

//  $for(op in ${OP_bit_extraction}) {
//    $for(w in ${int_alu_widths}) {
//      ${op}_${w}(op(
//                    $for (idx in $0..(exec_units-1)) { "${op}_${w}.${idx}" })
//		 flags(ARITHOP INT SPECULATIVE));
//    }
//  }

  // Table 5: Move operations

  $for(class in moveii movepp movegg movebb movegc movecg) {
     $for(op in ${OP_${class}}){      
        ${op}(op || ( $for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
        flags!(ARITHOP INT SPECULATIVE));
     }
  }

  // New Operations - Mass clear operation for PR
  $for(op in ${OP_mass_pred_clear}) {
    ${op}(op($for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	  flags(ARITHOP INT SPECULATIVE));
  }

  $for(op in ${OP_pred_writes}){
    ${op}(op($for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	  flags(ARITHOP NULL SPECULATIVE));
  }

  // Int literal moves to GPR
  $for(op in ${OP_int_literal_moves}) {
    ${op}(op($for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	    flags(ARITHOP INT SPECULATIVE));
  }
 
  // Table 8: Compare-to-register operations
  $for(op in ${OP_int_compare_to_reg}) {
    $for(w in ${int_alu_widths}) {
      $for(ic in ${integer_compare_conds}) {
	${op}_${w}_${ic}(op($for (idx in $0..(exec_units-1)) { "${op}_${w}_${ic}.${idx}" })
			 flags(ARITHOP INT SPECULATIVE));
      }
    }
  }

  // Table 9: Two-target compare-to-predicate operations
  $for(op in ${OP_int_cmp_pred_two}) {
    $for(w in ${int_alu_widths}) {
      $for(ic in ${integer_compare_conds}) {
	$for(da1 in ${cmpp_dest_actions}) {
	  $for(da2 in ${cmpp_dest_actions}) {	
	    ${op}_${w}_${ic}_${da1}_${da2}(op(
                                              $for (idx in $0..(exec_units-1)) { 
                                                "${op}_${w}_${ic}_${da1}_${da2}.${idx}" })
					   flags(ARITHOP INT SPECULATIVE));
	  }
	}
      }
    }
  }

/*  ----------
  // HPL-PD extension: One target compare to predicate operations. 
  $for(op in ${OP_int_cmp_pred_one}){
    $for(w in ${int_alu_widths}){
      $for(ic in ${integer_compare_conds}){
	$for(da1 in ${cmpp_dest_actions}){
	${op}_${w}_${ic}_${da1}(op($for (idx in $0..(exec_units-1)) 
	                           { "${op}_${w}_${ic}_${da1}.${idx}"})
			        flags(ARITHOP INT SPECULATIVE));
	}
      }
    }
  }
--------- */

  // Table 16: Prepare to branch (cast on int unit)
  $for(op in ${OP_pbrs}){
    ${op}(op($for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	  flags(ARITHOP INT SPECULATIVE));
  }

  // HPL-PD 2.0 extn
  // literal moves to BTR
  $for(op in ${OP_btr_literal_moves}) {
    ${op}(op($for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	  flags(ARITHOP INT SPECULATIVE));
  }

  // **** Float Operations ****

  // Table 3: Floating-point computation operations
  $for (class in floatarith1_float floatarith1_floatdiv floatarith2_float 
                 floatarith2_floatdiv floatarith2_floatmpy floatarith3_floatmpy) {
    $for(op in ${OP_${class}}) {
      $for(w in ${float_widths}) {
	${op}_${w}(op( $for (idx in $0..(exec_units-1)) { "${op}_${w}.${idx}"})
		   flags(ARITHOP FLOAT SPECULATIVE));
      }
    }
  }

  // Table 4: Conversion operations 
  $for(op in ${OP_convif} ${OP_convfi} ${OP_convff}) {
    ${op}(op( $for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	  flags(ARITHOP FLOAT SPECULATIVE));
  }

  // Table 5: Move operations

  $for(op in ${OP_moveff}){
     $for(w in ${float_widths}){
        ${op}_${w}(op || ( $for (idx in $0..(exec_units-1)) { "${op}_${w}.${idx}" })
        flags!(ARITHOP FLOAT SPECULATIVE));
     }
  }  

  // HPL-PD 2.0 Extn
  // Float literal moves to FPR
  $for(op in ${OP_float_literal_moves}) {
    ${op}(op( $for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	  flags(ARITHOP FLOAT SPECULATIVE));
  }

  // Table 8: Compare-to-register operations
  $for(op in ${OP_float_compare_to_reg}) {
    $for(w in ${float_widths}) {
      $for(fc in ${float_compare_conds}) {
	${op}_${w}_${fc}(op( 
                            $for (idx in $0..(exec_units-1)) { "${op}_${w}_${fc}.${idx}" })
			 flags(ARITHOP FLOAT SPECULATIVE));
      }
    }
  }

  // Table 9: Two-target compare-to-predicate operations
  $for(op in ${OP_float_cmp_pred_two}) {
    $for(w in ${float_widths}) {
      $for(fc in ${float_compare_conds}) {
	$for(da1 in ${cmpp_dest_actions}) {
	  $for(da2 in ${cmpp_dest_actions}) {	
	    ${op}_${w}_${fc}_${da1}_${da2}(op( 
                                              $for (idx in $0..(exec_units-1)) { 
                                              "${op}_${w}_${fc}_${da1}_${da2}.${idx}" })
					   flags(ARITHOP FLOAT SPECULATIVE));
	  }
	}
      }
    }
  }

/*  ----------
  // HPL-PD extension: One target compare to predicate operations. 
   //friend class Primitive_op;
  $for(op in ${OP_float_cmp_pred_one}) {
    $for(w in ${float_widths}) {
      $for(fc in ${float_compare_conds}) {
	$for(da1 in ${cmpp_dest_actions}) {
	  ${op}_${w}_${fc}_${da1}(op($for (idx in $0..(exec_units-1)) { 
                                       "${op}_${w}_${fc}_${da1}.${idx}" })
				  flags(ARITHOP FLOAT SPECULATIVE));
	}
      }
    }
  }
--------- */

  // **** Memory Operations ****
  
  // Table 5: Move operations 
  $for (class in moveif movefi) {
    $for(op in ${OP_${class}}) {
      $for(rh in ${float_register_halves}) {
	${op}_${rh}(op( 
                       $for (idx in $0..(exec_units-1)) { "${op}_${rh}.${idx}" })
		    flags(ARITHOP MEMORY SPECULATIVE));
      }
    }
  }

  // Integer load ops
  // Table 12, 13, 14: Load/store operations for cache/main memory
  $for(ss in ${latency_src_cache_specifiers}) {
    $for(ts in ${target_cache_specifiers}) {
      $for(w in ${int_mem_widths}) {
	$for (op in ${OP_intload}) {
	  ${op}_${w}_${ss}_${ts}(op( $for (idx in $0..(exec_units-1)) { 
                                      "${op}_${w}_${ss}_${ts}.${idx}" })
				 flags(LOADOP MEMORY SPECULATIVE));
	}
      }
    }
  }

  // Float load ops
   $for(ss in ${latency_src_cache_specifiers}) {
    $for(ts in ${target_cache_specifiers}) {
      $for(w in ${float_widths}) {
	$for (op in ${OP_floatload}) {
	  ${op}_${w}_${ss}_${ts}(op( $for (idx in $0..(exec_units-1))
				    { "${op}_${w}_${ss}_${ts}.${idx}" })
				 flags(LOADOP MEMORY SPECULATIVE));
	}
      }
    }
  }

  // Integer store ops
  $for(ts in ${target_cache_specifiers}) {
    $for(w in ${int_mem_widths}) {
      $for (op in ${OP_intstore}) {
	  ${op}_${w}_${ts}(op( $for (idx in $0..(exec_units-1)) { 
                                "${op}_${w}_${ts}.${idx}" })
			   flags(STOREOP MEMORY NONSPECULATIVE));
      }
    }
  }

  // Float store ops
  $for(ts in ${target_cache_specifiers}) {
    $for(w in ${float_widths}) {
      $for (op in ${OP_floatstore}) {
	  ${op}_${w}_${ts}(op( $for (idx in $0..(exec_units-1)) { 
                                "${op}_${w}_${ts}.${idx}" })
			   flags(STOREOP MEMORY NONSPECULATIVE));
      }
    }
  }

  // Explicit save/restore formats - Shail Aditya 05/26/98
  $for(class in intsave brsave intsaveg brsaveg) {
    $for(op in ${OP_${class}}) {
      ${op}(op($for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	    flags(STOREOP MEMORY NONSPECULATIVE));
    }
  }
  $for(class in floatsave floatsaveg) {
    $for(op in ${OP_${class}}) {
      $for(width in S D) {
	${op}_${width}(op($for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	      flags(STOREOP MEMORY NONSPECULATIVE));
      }
    }
  }
  $for(class in intrestore brrestore intrestoreg brrestoreg) {
    $for(op in ${OP_${class}}) {
      ${op}(op($for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	    flags(LOADOP MEMORY SPECULATIVE));
    }
  }
  $for(class in floatrestore floatrestoreg) {
    $for(op in ${OP_${class}}) {
      $for(width in S D) {
	${op}_${width}(op($for (idx in $0..(exec_units-1)) { "${op}.${idx}" })
	      flags(LOADOP MEMORY SPECULATIVE));
      }
    }
  }

  // Operations for predicate spilling. These will go away soon.
  $for(op in ${OP_pfill}) {
    ${op}(op( $for (idx in $0..(exec_units-1)) { "${op}.${idx}" }) 
	  flags(LOADOP MEMORY SPECULATIVE));
  }
  $for(op in ${OP_pspill}) {
    ${op}(op( $for (idx in $0..(exec_units-1)) { "${op}.${idx}" }) 
	  flags(STOREOP MEMORY NONSPECULATIVE));
  }

  // **** Branch Operations ****
  $for (op in ${OP_branches} ${OP_dv_branches} ${OP_swp_branches}) {
    ${op}(op( $for (idx in $0..(exec_units-1)) { "${op}.${idx}" }) 
	  flags(BRANCHOP BRANCH NONSPECULATIVE));
  }

  // CHANGES.JB: add unsupported opcodes
  // **** Unsupported opcodes ****
  CMPP_W_LLT_UN_UN (flags || (is_unsupported));
  CMPR_W_LLT (flags || (is_unsupported));
  CMPP_W_LGEQ_UN_UN (flags || (is_unsupported));
  CMPR_W_LGEQ (flags || (is_unsupported));
  DIV_W(flags || (is_unsupported)); 
  DIVL_W(flags || (is_unsupported)); 
  EXTS_B(flags || (is_unsupported)); 
  EXTS_H(flags || (is_unsupported)); 
  EXTZ_B(flags || (is_unsupported)); 
  EXTZ_H(flags || (is_unsupported)); 
  REM_W(flags || (is_unsupported)); 
  REML_W(flags || (is_unsupported)); 


  // *** Assign commutative flag to integer arith/cmp operations ***
  $for(op in ${OP_int_commutatives}) {
      $for(w in ${int_alu_widths}){
	${op}_${w}(flags||(is_comm));
      }
  }
  $for(op in ${OP_cmp_commutatives}) {
  	${op}(flags||(is_comm));
  }

  // **** Dummy Operations ****
  NO_OP(op("NO_OP.0") flags(NULLOP NULL NONSPECULATIVE));
  M_NO_OP(op("M_NO_OP.0") flags(NULLOP NULL NONSPECULATIVE));
  PROLOGUE(op("PROLOGUE.0") flags(NULLOP NULL SPECULATIVE));
  EPILOGUE(op("EPILOGUE.0") flags(NULLOP NULL SPECULATIVE));
  DEFINE(op("DEFINE.0") flags(NULLOP NULL SPECULATIVE));
  // Shivarama Rao. Added new opcodes for pseudo load and removed the
  // Overloaded PSEUDO_LOAD operation
  PSEUDO_LOAD_LITERAL(op("PSEUDO_LOAD_LITERAL.0") flags(NULLOP NULL SPECULATIVE));
  PSEUDO_LOAD_SCALAR(op("PSEUDO_LOAD_SCALAR.0") flags(NULLOP NULL SPECULATIVE));
  PSEUDO_LOAD_SCALAR_ARRAY(op("PSEUDO_LOAD_SCALAR_ARRAY.0") flags(NULLOP NULL SPECULATIVE));
  PSEUDO_LOAD_EVR(op("PSEUDO_LOAD_EVR.0") flags(NULLOP NULL SPECULATIVE));
  // Shivarama Rao. Added new opcodes for pseudo store and removed the
  // Overloaded PSEUDO_STORE operation
  PSEUDO_STORE_SCALAR(op("PSEUDO_STORE_SCALAR.0") flags(NULLOP NULL SPECULATIVE));
  PSEUDO_STORE_SCALAR_ARRAY(op("PSEUDO_STORE_SCALAR_ARRAY.0") flags(NULLOP NULL SPECULATIVE));
  PSEUDO_STORE_EVR(op("PSEUDO_STORE_EVR.0") flags(NULLOP NULL SPECULATIVE));
  PSEUDO_PRINT(op("PSEUDO_PRINT.0") flags(NULLOP NULL SPECULATIVE));
  PSEUDO_INIT_MEM(op("PSEUDO_INIT_MEM.0") flags(NULLOP NULL SPECULATIVE));
  ALLOC(op("ALLOC.0") flags(NULLOP NULL SPECULATIVE));
  DUMMY_BR(op("DUMMY_BR.0") flags(NULLOP NULL NONSPECULATIVE));
  C_MERGE(op("C_MERGE.0") flags(NULLOP NULL NONSPECULATIVE));
  D_SWITCH(op("D_SWITCH.0") flags(NULLOP NULL NONSPECULATIVE));
  D_MERGE(op("D_MERGE.0") flags(NULLOP NULL NONSPECULATIVE));
  REMAP(op("REMAP.0") flags(NULLOP NULL NONSPECULATIVE));
  BRDIR(op("BRDIR.0") flags(NULLOP NULL NONSPECULATIVE));
  BRIND(op("BRIND.0") flags(NULLOP NULL NONSPECULATIVE));
  
  //pseudo DEF and USE for multilevel clustering
  DEF(op("DEF.0") flags(NULLOP NULL SPECULATIVE));
  USE(op("USE.0") flags(NULLOP NULL SPECULATIVE));

  CUSTOM(op("CUSTOM.0") flags(NULLOP NULL SPECULATIVE CUSTOMOP));
}

