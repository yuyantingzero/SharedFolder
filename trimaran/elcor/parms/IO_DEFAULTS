#
#	Input/Output default parameters
#	Elcor compiler - HP Laboratories
#
#


(Elcor_IO declaration


    # Input format can be one of the following: (Note the reader is
    # is not smart enough to figure out the input format so you must
    # explicitly specify it)
    #    none = no input, just process mdes/stat/etc files
    #    lcode = Impact textual IR - HPL-PD architecture
    #    rebel = Region-based elcor language - elcor textual IR
    #    auto = Try to auto-detect the input format
    input_format = auto;

    # Output format can be one of the following:
    #    none = no output
    #    lcode = Impact textual IR - HPL-PD architecture
    #    rebel = Region-based elcor language - elcor textual IR
    output_format = rebel;

    # I/O options (overwritten by -i and -o)
    input_file_name = stdin;
    output_file_name = stdout;

    # Rebel output format options
    indent_width = 2;
    output_max_line_width = 270;
    print_verbose_header = yes;

    # MDES file
    lmdes_file_name = $elcor_rel_path$/mdes/hpl_pd_elcor_std.lmdes2;
    lmdes_output_file_name = /dev/null;

    # stats files generated by elcor
    stat_file_name = ELCOR_STATS;
    time_file_name = ELCOR_TIME;
    opcode_file_name = ELCOR_OPCODE;
    branch_file_name = ELCOR_BRANCH;

    # Controls how to derive Elcor memory dep info.  Possible values are:
    #    auto = use sync arcs if present else sequentially link (the default)
    #    seq = force the use of sequential linking method
    #    sync = force the use of Lcode sync arcs
    #    njsync = force the use of Load/Store Lcode sync arcs (no jsr)
    #    none = no memvrs, IR will be incorrect in terms of memory deps
    memvr_setup_mode = auto;

    # Refine memory dependency sync vars further using the memory dependence 
    # profiling information.
    memvr_profiled = no;

    # Punt when mdes encounters unknown op.
    punt_on_unknown_op = yes;

end)
