# Benchmark 'compile_info' module version 2.0 (2/15/99)
# Covered by the license and copyright(s) in impact/scripts/read_compile_info.
#
# Used directly by impact/scripts/read_compile_info and indirectly by others.
# Use impact/scripts/test_bench_info to test validity of settings.
# See impact/tutorials/bench_info_tutorial for complete usage information.
#
# Source of benchmark's preprocessing, compilation, and link options, etcetera:
#    The IMPACT team (based on regression testing scripts)
#
# Revision history for this file:
#    2/15/99  Initial port by John C. Gyllenhaal (www.crhc.uiuc.edu/IMPACT) 
#
# Predefined variables:
#
#   BASE_DIR="location of this module (e.g., impact/benchmarks/wc)"
#   HOST_PLATFORM="host platform for profiling/emulation (e.g., hp)"
#   HOST_COMPILER="host compiler for libraries/header files (e.g., cc)" 
#
# IMPORTANT NOTES ABOUT USAGE (see bench_info_tutorial for details):
#
#   1) Do not do *ANYTHING* in this info module except define the following
#      /bin/sh variables:
#
#          ANSI_C_SOURCE, PREPROCESSING_OPTIONS, LIB_REQUIREMENTS,
#          LINKING_PREOPTIONS, LINKING_POSTOPTIONS, PARM_OVERRIDE_FILE,
#          DEFAULT_TRAIN, DEFAULT_EVAL
#
#      If necessary, you may set these variables based on the values of
#      HOST_COMPILER and HOST_PLATFORM.  For example:
#
#         if [ $HOST_PLATFORM = "hp" ]; then 
#            PREPROCESSING_OPTIONS="-DHPUX"; 
#         else 
#            ...
#
#      This file will be executed using sh's ". (this_file)".  It is fragile!
#      You may, of course, add comments. 
#
#   2) Below is the basic template for the usage of these variables
#      (shown for HP-UX's cc compiler, in reality abstracted away via
#       read_platform_info queries, etc.)
#
#      ****************** PREPROCESSING SOURCE **********************
#      # Use host compiler to preprocess source files 
#      if [ $ANSI_C_SOURCE -eq 1 ]; then
#          cc -w -E -Aa $PREPROCESSING_OPTIONS file.c > file.i;
#      else
#          cc -w -E -Ac $PREPROCESSING_OPTIONS file.c > file.i
#      fi
#
#      ************* COMPILING USING IMPACT/TRIMARAN ****************
#      # For IMPACT/Trimaran, set STD_PARMS_FILE to the baseline parms to use.
#      # Use parm facility features to allow PARM_OVERRIDE_FILE (if defined)
#      # to override the USER_PARMS_FILE for the specified parm values and
#      # use USER_PARMS_FILE settings for the rest of the parameters.
#    
#      # If PARM_OVERRIDE_FILE specified, use as the top-level parm file.
#      if [ "$PARM_OVERRIDE_FILE" != "" ]; then
#          # Set STD_PARMS_FILE to benchmark's specific override file.
#          STD_PARMS_FILE="$PARM_OVERRIDE_FILE";
#          export STD_PARMS_FILE;
#
#          # Set BENCHMARK_BASELINE_PARMS to user-specified file which will be
#          # used to set all the parameters that PARM_OVERRIDE_FILE doesn't 
#          # specify.  PARM_OVERRIDE_FILE must be set up properly to do this!
#          BENCHMARK_BASELINE_PARMS="$USER_PARMS_FILE";
#          export BENCHMARK_BASELINE_PARMS;
# 
#      # Otherwise, use user-specified parms file directly
#      else
#          # Set STD_PARMS_FILE to user-specified parms file.
#          STD_PARMS_FILE="$USER_PARMS_FILE";
#          export STD_PARMS_FILE;
#      fi
#      
#      ****************** LINKING OBJECT FILES **********************
#      # Use shared libraries if required by benchmark or if user selected
#      if [ $LIB_REQUIREMENTS = "SHARED_REQUIRED" -o (user_selected) ]; then
#          # Use shared libraries if exists, otherwise use static libraries
#          LIB_SPECIFIER="-Wl,-a,shared_archive";
#      else
#          # Use static libraries only
#          LIB_SPECIFIER="-Wl,-a,archive";
#      fi
#
#      # Generate executable from .o files using HP-UX's cc
#      if [ $ANSI_C_SOURCE -eq 1 ]; then
#          cc -w -z +DA1.1 -O -Aa -o (executable_name) $LIB_SPECIFIER \
#             $LINKING_PREOPTIONS *.o $LINKING_POSTOPTIONS -lm;
#      else
#          cc -w -z +DA1.1 -O -Ac -o (executable_name) $LIB_SPECIFIER \
#             $LINKING_PREOPTIONS *.o $LINKING_POSTOPTIONS -lm;
#      fi
#
#      **************** TRAINING (PCODE PROFILING) ***********************
#      # Use DEFAULT_TRAIN unless user specifies what they want to use
#      if (user did not specify training inputs); then
#         TRAIN_LIST="$DEFAULT_TRAIN";
#      else
#         TRAIN_LIST="(user's list of one or more input names)";
#
#      (Generate instrumented executable for Pcode profiling)
#
#      # Generate and combine profile data for each input in TRAIN_LIST 
#      for INPUT in $TRAIN_LIST
#      do
#        (Use 'read_exec_info (benchmark) -input $INPUT' to get exec info)
#        (Run executable with above execution info to generate prof info)
#      done
#      (Combine profile data from the runs into one data set)
#      (Merge combined data set back into Pcode)
#
#      ************************ EVALUATION ***********************
#      # Use DEFAULT_EVAL unless user specifies what they want to use
#      if (user did not specify evaluation inputs); then
#         EVAL_LIST="$DEFAULT_EVAL";
#      else
#         EVAL_LIST="(user's list of one or more input names)";
#
#      # Evaluation may include profiling (for static analysis) or simulation.
#      # Usually performed on the "assembly" code for the experimental machine.
#      (Generate executable, etc. for final "assembly" code)
#
#      # Evaluate benchmark for each input
#      for INPUT in $EVAL_LIST
#      do
#        (Use 'read_exec_info (benchmark) -input $INPUT' to get exec info)
#        (Run/evaluate executable with above execution info)
#      done
#
#
#   2) Place only benchmark-specific settings in PREPROCESSING_OPTIONS.
#      (e.g., -DSPEC for 126.gcc, if desired.)
#
#   3) Use BASE_DIR (defined by read_exec_info) to locate PARM_OVERRIDE_FILE.
#      Set PARM_OVERRIDE_FILE to "", if no parm overrides are necessary.
#
#   4) If this benchmark *requires* linking to shared libraries, set 
#      LIB_REQUIREMENTS to "SHARED_REQUIRED" (which overrides user's choice
#      of linking to static or shared libraries).  Otherwise set to "NONE".
#
#   5) Compile all available source together, at the same time (i.e., cc *.c).
#      Don't use libraries for things you have source for!  (i.e., compile in 
#      f2c library source code, don't link it in!) 
#
#   6) Put the most important input first if specifying multiple default 
#      training or evaluation inputs, since only the first input will be 
#      used in those cases where multiple inputs are not supported.
# 

### COMPILE INFO MODULE FOR: fft 

# K&R C
ANSI_C_SOURCE=1;

# Use "parm_overrides" file, only if necessary
PARM_OVERRIDE_FILE="";
#PARM_OVERRIDE_FILE="$BASE_DIR/parm_overrides";

# Settings needed for HPUX's cc (so assume true for other platforms)
PREPROCESSING_OPTIONS="";
LINKING_PREOPTIONS="";
LINKING_POSTOPTIONS="-lm";
LIB_REQUIREMENTS="NONE";

# Specify default training and evaluation inputs (one or more input names)
DEFAULT_TRAIN="mi_train_input1";
DEFAULT_EVAL="mi_train_input1";

